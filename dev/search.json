[{"path":[]},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://applicable.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://applicable.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 applicable authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://applicable.tidymodels.org/dev/articles/binary-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applicability domain methods for binary data","text":"Similarity statistics can used compare data sets predictors binary. One common measures Jaccard index. training set size n, n similarity statistics new sample. can summarized via mean statistic quantile. general, want similarity low within training set (.e., diverse training set) high new samples predicted. analyze Jaccard metric, applicable provides following methods: apd_similarity: analyzes samples terms similarity scores. training set n samples, new sample compared , resulting n similarity scores. can summarized median similarity. autoplot: shows cumulative probability versus unique similarity values training set. score: scores new samples using similarity methods. particular, calculates similarity scores add_percentile = TRUE, also estimates percentile similarity scores.","code":"library(applicable)"},{"path":"https://applicable.tidymodels.org/dev/articles/binary-data.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Applicability domain methods for binary data","text":"example data two QSAR data sets binary fingerprints used predictors. Let us construct model: can see , fairly diverse training set:  can compare similarity new samples training set: Samples 3 5 definitely extrapolations based predictors. words, new samples similar training set predictions may reliable.","code":"data(qsar_binary) jacc_sim <- apd_similarity(binary_tr) jacc_sim #> Applicability domain via similarity #> Reference data were 67 variables collected on 4330 data points. #> New data summarized using the mean. library(ggplot2)  # Plot the empirical cumulative distribution function for the training set autoplot(jacc_sim) # Summarize across all training set similarities mean_sim <- score(jacc_sim, new_data = binary_unk) mean_sim #> # A tibble: 5 × 2 #>   similarity similarity_pctl #>        <dbl>           <dbl> #> 1     0.376            49.8  #> 2     0.284            13.5  #> 3     0.218             6.46 #> 4     0.452           100    #> 5     0.0971            5.59"},{"path":"https://applicable.tidymodels.org/dev/articles/continuous-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applicability domain methods for continuous data","text":"applicable provides following methods analyze applicability domain model: Principal component analysis Hat values statistics","code":"library(applicable)"},{"path":"https://applicable.tidymodels.org/dev/articles/continuous-data.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Applicability domain methods for continuous data","text":"use Ames IA housing data example. 2,930 properties data. Sale Price recorded along 74 predictors, including: Location (e.g. neighborhood) lot information. House components (garage, fireplace, pool, porch, etc.). General assessments overall quality condition. Number bedrooms, baths, . details can found De Cock (2011, Journal Statistics Education). raw data http://jse.amstat.org/v19n3/decock/AmesHousing.txt use processed version found AmesHousing package. applicable also contains update data three new properties (although fewer fields collected ). pre-process training set, use recipes package. first tell recipes additional value neighborhood data, direct create dummy variables categorical predictors. cases levels observed factor, eliminate predictors single unique value, estimate transformation make predictor distributions symmetric. , data centered scaled. transformations applied new data points using statistics estimated training set.","code":"library(modeldata) data(ames) library(recipes) library(dplyr)  ames_cols <- intersect(names(ames), names(ames_new))  training_data <-    ames %>%    # For consistency, only analyze the data on new properties   dplyr::select(one_of(ames_cols)) %>%    mutate(     # There is a new neighborhood in ames_new     Neighborhood = as.character(Neighborhood),     Neighborhood = factor(Neighborhood, levels = levels(ames_new$Neighborhood))   )   training_recipe <-   recipe( ~ ., data = training_data) %>%   step_dummy(all_nominal()) %>%    # Remove variables that have the same value for every data point.   step_zv(all_predictors()) %>%    # Transform variables to be distributed as Gaussian-like as possible.   step_YeoJohnson(all_numeric()) %>%   # Normalize numeric data to have a mean of zero and   # standard deviation of one.   step_normalize(all_numeric())"},{"path":"https://applicable.tidymodels.org/dev/articles/continuous-data.html","id":"principal-component-analysis","dir":"Articles","previous_headings":"Example","what":"Principal Component Analysis","title":"Applicability domain methods for continuous data","text":"following functions applicable used principal component analysis: apd_pca: computes principal components account either 95% provided threshold variability. also computes percentiles principal components mean principal component. autoplot: plots distribution function pcas. can also provide optional set dplyr selectors, dplyr::matches() dplyr::starts_with(), selecting variables shown plot. score: calculates principal components new data percentiles compared training data. number principal components computed depends threshold given fit time. also computes multivariate distance principal component mean. Let us apply apd_pca modeling function data: Since threshold provided, function computed number principal components accounted 95% total variance. illustration, setting threshold = 0.25 25%, now need 10 principal components: Plotting distribution function PCA scores also helpful:  can use regular expressions plot smaller subset pca statistics:  score function compares training data new samples. Let’s go back case capture 95% variation predictors score new samples. Since used recipe interface, can give score function original data: Notice samples, displayed red, fairly dissimilar training set first component:  driving first component? can look predictors largest values rotation matrix (.e. values define linear combinations PC scores). top five : three houses extreme influential variable (year built) since new homes. also tend fairly large garages:  may driving first component. However, overall distance values relatively small, indicates , overall, new houses outside mainstream data.","code":"ames_pca <- apd_pca(training_recipe, training_data) ames_pca #> # Predictors: #>    64 #> # Principal Components: #>    151 components were needed #>    to capture at least 95% of the #>    total variation in the predictors. ames_pca <- apd_pca(training_recipe, training_data, threshold = 0.25) ames_pca #> # Predictors: #>    64 #> # Principal Components: #>    12 components were needed #>    to capture at least 25% of the #>    total variation in the predictors. library(ggplot2) autoplot(ames_pca) ames_pca <- apd_pca(training_recipe, training_data) pca_score <- score(ames_pca, ames_new) pca_score %>% select(matches(\"PC00[1-3]\"), contains(\"distance\")) #> # A tibble: 2 × 8 #>   PC001 PC002 PC003 PC001_pctl PC002_pctl PC003_pctl distance distance_pctl #>   <dbl> <dbl> <dbl>      <dbl>      <dbl>      <dbl>    <dbl>         <dbl> #> 1 NA    NA    NA          NA         NA         NA       NA            NA   #> 2  2.47  2.22  8.79       43.4       53.2       97.9     55.9          99.4 #> Warning: Removed 1 rows containing missing values (`geom_vline()`). # `ames_pca$pcs` is the output of `prcomp()` comp_one <- ames_pca$pcs$rotation[, 1] comp_one[order(abs(comp_one), decreasing = TRUE)] %>% head(5) #>       Year_Built      Garage_Cars      Garage_Area   Year_Remod_Add Foundation_PConc  #>        0.2302333        0.2004821        0.1904687        0.1807016        0.1803793"},{"path":"https://applicable.tidymodels.org/dev/articles/continuous-data.html","id":"hat-values","dir":"Articles","previous_headings":"Example","what":"Hat Values","title":"Applicability domain methods for continuous data","text":"Hat leverage values based numerics linear regression. measure distance data point center training set distribution. example, numeric training set matrix \\(X_{n \\times p}\\), hat matrix training set computed using \\[H = X'(X'X)^{-1}X\\] corresponding hat values training diagonals \\(H\\). values can computed using stats::hatvalues(lm_model) lm model object. Also, compute values new samples. Suppose new, unknown sample (\\(p \\times 1\\) data vector \\(u\\)). hat value sample \\[h = u^\\intercal(X^\\intercal X)^{-1}u\\]. following functions applicable used compute hat values model: apd_hat_values: computes matrix \\((X^\\intercal X)^{-1}\\). score: calculates hat values new samples percentiles. Two caveats using hat values: numerical methods less tolerant PCA. example, extremely correlated predictors degrade ability hat values effectively used. Also, since inverse used, linear dependencies within \\(X\\). resolve former example, recipe step recipes::step_corr() can used reduce correlation. latter issue, recipes::step_lincomp() identify remove linear dependencies data (shown ). using linear logistic model, model adds intercept columns ones \\(X\\). equivalent computations, add vector ones data use recipes::step_intercept(). Let us apply apd_hat_values modeling function data (ensuring linear dependencies):","code":"non_singular_recipe <-    training_recipe %>%    step_lincomb(all_predictors())  # Recipe interface ames_hat <- apd_hat_values(non_singular_recipe, training_data) options(prev_options)"},{"path":"https://applicable.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marly Gotti. Author, maintainer. Max Kuhn. Author. . Copyright holder, funder.","code":""},{"path":"https://applicable.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gotti M, Kuhn M (2023). applicable: Compilation Applicability Domain Methods. https://github.com/tidymodels/applicable, https://applicable.tidymodels.org.","code":"@Manual{,   title = {applicable: A Compilation of Applicability Domain Methods},   author = {Marly Gotti and Max Kuhn},   year = {2023},   note = {https://github.com/tidymodels/applicable, https://applicable.tidymodels.org}, }"},{"path":[]},{"path":"https://applicable.tidymodels.org/dev/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"A Compilation of Applicability Domain Methods","text":"times model’s prediction taken skepticism. example, new data point substantially different training set, predicted value may suspect. chemistry, uncommon create “applicability domain” model measures amount potential extrapolation new samples training set. applicable contains different methods measure much new data point extrapolation original data ().","code":""},{"path":"https://applicable.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Compilation of Applicability Domain Methods","text":"can install released version applicable CRAN : Install development version applicable GitHub :","code":"install.packages(\"applicable\") # install.packages(\"pak\") pak::pak(\"tidymodels/applicable\")"},{"path":"https://applicable.tidymodels.org/dev/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"A Compilation of Applicability Domain Methods","text":"learn use applicable, check vignettes: vignette(\"binary-data\", \"applicable\"): Learn different methods analyze binary data. vignette(\"continuous-data\", \"applicable\"): Learn different methods analyze continuous data.","code":""},{"path":"https://applicable.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A Compilation of Applicability Domain Methods","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post RStudio Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/ames_new.html","id":null,"dir":"Reference","previous_headings":"","what":"Recent Ames Iowa Houses — ames_new","title":"Recent Ames Iowa Houses — ames_new","text":"data related set described De Cock (2011) data data recorded 2,930 properties Ames IA.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/ames_new.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Recent Ames Iowa Houses — ames_new","text":"De Cock, D. (2011). \"Ames, Iowa: Alternative Boston Housing Data End Semester Regression Project,\" Journal Statistics Education,  Volume 19, Number 3. https://www.cityofames.org/government/departments-divisions--h/city-assessor http://jse.amstat.org/v19n3/decock/DataDocumentation.txt http://jse.amstat.org/v19n3/decock.pdf","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/ames_new.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recent Ames Iowa Houses — ames_new","text":"ames_new tibble","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/ames_new.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recent Ames Iowa Houses — ames_new","text":"data sets includes three properties added since original reference. less fields data set; transcribed assessor's office included.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_hat_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a apd_hat_values — apd_hat_values","title":"Fit a apd_hat_values — apd_hat_values","text":"apd_hat_values() fits model.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_hat_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a apd_hat_values — apd_hat_values","text":"","code":"apd_hat_values(x, ...)  # S3 method for default apd_hat_values(x, ...)  # S3 method for data.frame apd_hat_values(x, ...)  # S3 method for matrix apd_hat_values(x, ...)  # S3 method for formula apd_hat_values(formula, data, ...)  # S3 method for recipe apd_hat_values(x, data, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/apd_hat_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a apd_hat_values — apd_hat_values","text":"x Depending context: data frame predictors. matrix predictors. recipe specifying set preprocessing steps created recipes::recipe(). ... currently used, required extensibility. formula formula specifying predictor terms right-hand side. outcome specified. data recipe formula used, data specified : data frame containing predictors.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_hat_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a apd_hat_values — apd_hat_values","text":"apd_hat_values object.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_hat_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a apd_hat_values — apd_hat_values","text":"","code":"predictors <- mtcars[, -1]  # Data frame interface mod <- apd_hat_values(predictors)  # Formula interface mod2 <- apd_hat_values(mpg ~ ., mtcars)  # Recipes interface library(recipes) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: ‘recipes’ #> The following object is masked from ‘package:stats’: #>  #>     step rec <- recipe(mpg ~ ., mtcars) rec <- step_log(rec, disp) mod3 <- apd_hat_values(rec, mtcars)"},{"path":"https://applicable.tidymodels.org/dev/reference/apd_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a apd_pca — apd_pca","title":"Fit a apd_pca — apd_pca","text":"apd_pca() fits model.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a apd_pca — apd_pca","text":"","code":"apd_pca(x, ...)  # S3 method for default apd_pca(x, ...)  # S3 method for data.frame apd_pca(x, threshold = 0.95, ...)  # S3 method for matrix apd_pca(x, threshold = 0.95, ...)  # S3 method for formula apd_pca(formula, data, threshold = 0.95, ...)  # S3 method for recipe apd_pca(x, data, threshold = 0.95, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/apd_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a apd_pca — apd_pca","text":"x Depending context: data frame predictors. matrix predictors. recipe specifying set preprocessing steps created recipes::recipe(). ... currently used, required extensibility. threshold number indicating percentage variance desired principal components. must number greater 0 less equal 1. formula formula specifying predictor terms right-hand side. outcome specified. data recipe formula used, data specified : data frame containing predictors.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a apd_pca — apd_pca","text":"apd_pca object.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a apd_pca — apd_pca","text":"function computes principal components account either 95% provided threshold variability. also computes percentiles absolute value principal components. Additionally, calculates mean principal component.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a apd_pca — apd_pca","text":"","code":"predictors <- mtcars[, -1]  # Data frame interface mod <- apd_pca(predictors)  # Formula interface mod2 <- apd_pca(mpg ~ ., mtcars)  # Recipes interface library(recipes) rec <- recipe(mpg ~ ., mtcars) rec <- step_log(rec, disp) mod3 <- apd_pca(rec, mtcars)"},{"path":"https://applicable.tidymodels.org/dev/reference/apd_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Applicability domain methods using binary similarity analysis — apd_similarity","title":"Applicability domain methods using binary similarity analysis — apd_similarity","text":"apd_similarity() used analyze samples terms similarity scores binary data. features data binary (.e. zero one).","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applicability domain methods using binary similarity analysis — apd_similarity","text":"","code":"apd_similarity(x, ...)  # S3 method for default apd_similarity(x, quantile = NA_real_, ...)  # S3 method for data.frame apd_similarity(x, quantile = NA_real_, ...)  # S3 method for matrix apd_similarity(x, quantile = NA_real_, ...)  # S3 method for formula apd_similarity(formula, data, quantile = NA_real_, ...)  # S3 method for recipe apd_similarity(x, data, quantile = NA_real_, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/apd_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applicability domain methods using binary similarity analysis — apd_similarity","text":"x Depending context: data frame binary predictors. matrix binary predictors. recipe specifying set preprocessing steps created recipes::recipe(). ... Options pass proxyC::simil(), method. options specified, method = \"jaccard\" used. quantile real number 0 1 NA similarity values sample versus training set summarized. value NA specifies mean similarity computed. Otherwise, appropriate quantile computed. formula formula specifying predictor terms right-hand side. outcome specified. data recipe formula used, data specified : data frame containing binary predictors. predictors 1's removed (warning).","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applicability domain methods using binary similarity analysis — apd_similarity","text":"apd_similarity object.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_similarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Applicability domain methods using binary similarity analysis — apd_similarity","text":"function computes measures similarity different samples points. example, suppose samples B contain p binary variables. First, 2x2 table constructed B across elements. table contain p entries across four cells (see example ). , different measures likeness computed. training set n samples, new sample compared , resulting n similarity scores. can summarized single value; median similarity used default scoring function. method, computational methods fairly taxing large data sets. training set must stored (albeit sparse matrix format) object sizes may become large. default, computations run parallel using possible cores. change , call setThreadOptions function RcppParallel package.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_similarity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Applicability domain methods using binary similarity analysis — apd_similarity","text":"Leach, . Gillet V. (2007). Introduction Chemoinformatics. Springer, New York","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/apd_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applicability domain methods using binary similarity analysis — apd_similarity","text":"","code":"# \\donttest{ data(qsar_binary)  jacc_sim <- apd_similarity(binary_tr) jacc_sim #> Applicability domain via similarity #> Reference data were 67 variables collected on 4330 data points. #> New data summarized using the mean.  # plot the empirical cumulative distribution function (ECDF) for the training set: library(ggplot2) autoplot(jacc_sim)   # Example calculations for two samples: A <- as.matrix(binary_tr[1, ]) B <- as.matrix(binary_tr[2, ]) xtab <- table(A, B) xtab #>    B #> A    0  1 #>   0 62  0 #>   1  1  4  # Jaccard statistic xtab[2, 2] / (xtab[1, 2] + xtab[2, 1] + xtab[2, 2]) #> [1] 0.8  # Hamman statistic ((xtab[1, 1] + xtab[2, 2]) - (xtab[1, 2] + xtab[2, 1])) / sum(xtab) #> [1] 0.9701493  # Faith statistic (xtab[1, 1] + xtab[2, 2] / 2) / sum(xtab) #> [1] 0.9552239  # Summarize across all training set similarities mean_sim <- score(jacc_sim, new_data = binary_unk) mean_sim #> # A tibble: 5 × 2 #>   similarity similarity_pctl #>        <dbl>           <dbl> #> 1     0.376            49.8  #> 2     0.284            13.5  #> 3     0.218             6.46 #> 4     0.452           100    #> 5     0.0971            5.59 # }"},{"path":"https://applicable.tidymodels.org/dev/reference/applicable-package.html","id":null,"dir":"Reference","previous_headings":"","what":"applicable: A Compilation of Applicability Domain Methods — applicable-package","title":"applicable: A Compilation of Applicability Domain Methods — applicable-package","text":"modeling package compiling applicability domain methods R. combines different methods measure amount extrapolation new samples can training set. See Netzeva et al (2005) doi:10.1177/026119290503300209  overview applicability domains.","code":""},{"path":[]},{"path":"https://applicable.tidymodels.org/dev/reference/applicable-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"applicable: A Compilation of Applicability Domain Methods — applicable-package","text":"Maintainer: Marly Gotti marlygotti@gmail.com Authors: Max Kuhn max@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the distribution function for pcas — autoplot.apd_pca","title":"Plot the distribution function for pcas — autoplot.apd_pca","text":"Plot distribution function pcas","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the distribution function for pcas — autoplot.apd_pca","text":"","code":"# S3 method for apd_pca autoplot(object, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the distribution function for pcas — autoplot.apd_pca","text":"object object produced apd_pca. ... optional set dplyr selectors, dplyr::matches() dplyr::starts_with() selecting variables shown plot.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the distribution function for pcas — autoplot.apd_pca","text":"ggplot object shows distribution function principal component.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the distribution function for pcas — autoplot.apd_pca","text":"","code":"library(ggplot2) library(dplyr) library(modeldata) data(biomass)  biomass_ad <- apd_pca(biomass[, 3:8])  autoplot(biomass_ad)  # Using selectors in `...` autoplot(biomass_ad, distance) + scale_x_log10()  autoplot(biomass_ad, matches(\"PC[1-2]\"))"},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cumulative distribution function for similarity metrics — autoplot.apd_similarity","title":"Plot the cumulative distribution function for similarity metrics — autoplot.apd_similarity","text":"Plot cumulative distribution function similarity metrics","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cumulative distribution function for similarity metrics — autoplot.apd_similarity","text":"","code":"# S3 method for apd_similarity autoplot(object, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cumulative distribution function for similarity metrics — autoplot.apd_similarity","text":"object object produced apd_similarity. ... currently used.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the cumulative distribution function for similarity metrics — autoplot.apd_similarity","text":"ggplot object shows cumulative probability versus unique similarity values training set. large samples, approximation based random sample 5,000 training set points.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/autoplot.apd_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the cumulative distribution function for similarity metrics — autoplot.apd_similarity","text":"","code":"set.seed(535) tr_x <- matrix(   sample(0:1, size = 20 * 50, prob = rep(.5, 2), replace = TRUE),   ncol = 20 ) model <- apd_similarity(tr_x) #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if #> `.name_repair` is omitted as of tibble 2.0.0. #> ℹ Using compatibility `.name_repair`. #> ℹ The deprecated feature was likely used in the hardhat package. #>   Please report the issue at #>   <https://github.com/tidymodels/hardhat/issues>."},{"path":"https://applicable.tidymodels.org/dev/reference/binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary QSAR Data — binary","title":"Binary QSAR Data — binary","text":"Binary QSAR Data","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary QSAR Data — binary","text":"binary_tr,binary_ukn data frame frames 67 columns","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/binary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binary QSAR Data — binary","text":"data two different sources quantitative structure-activity relationship (QSAR) modeling contain 67 predictors either 0 1. training set contains 4,330 samples five unknown samples (Mutagen data QSARdata package).","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary QSAR Data — binary","text":"","code":"data(qsar_binary) str(binary_tr) #> 'data.frame':\t4330 obs. of  67 variables: #>  $ predictor01: num  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor02: num  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor03: num  1 1 1 1 1 1 1 1 1 1 ... #>  $ predictor04: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor05: num  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor06: num  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor07: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor08: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor09: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor10: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor11: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor12: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor13: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor14: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor15: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor16: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor17: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor18: int  0 0 0 1 0 0 0 0 0 0 ... #>  $ predictor19: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor20: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor21: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor22: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor23: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor24: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor25: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor26: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor27: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor28: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor29: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor30: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor31: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor32: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor33: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor34: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor35: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor36: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor37: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor38: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor39: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor40: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor41: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor42: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor43: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor44: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor45: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor46: num  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor47: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor48: num  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor49: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor50: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor51: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor52: int  1 1 1 0 1 0 1 1 0 0 ... #>  $ predictor53: int  0 0 1 0 1 0 0 0 0 0 ... #>  $ predictor54: int  0 0 1 0 1 0 1 1 0 0 ... #>  $ predictor55: int  0 0 1 0 0 0 0 0 0 0 ... #>  $ predictor56: int  0 0 1 0 1 0 1 0 0 0 ... #>  $ predictor57: int  0 0 1 0 1 0 0 0 0 0 ... #>  $ predictor58: int  0 0 1 0 1 0 1 0 0 0 ... #>  $ predictor59: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor60: int  0 0 1 0 1 0 1 0 0 0 ... #>  $ predictor61: int  0 0 1 0 1 0 0 0 0 0 ... #>  $ predictor62: int  1 0 1 0 1 0 0 1 0 0 ... #>  $ predictor63: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ predictor64: int  1 1 1 0 1 0 1 1 0 0 ... #>  $ predictor65: int  0 0 1 0 1 0 0 0 0 0 ... #>  $ predictor66: int  1 1 1 0 1 0 1 1 0 0 ... #>  $ predictor67: int  0 0 1 0 1 0 0 1 0 0 ..."},{"path":"https://applicable.tidymodels.org/dev/reference/okc_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"OkCupid Binary Predictors — okc_binary","title":"OkCupid Binary Predictors — okc_binary","text":"OkCupid Binary Predictors","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/okc_binary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"OkCupid Binary Predictors — okc_binary","text":"Kim (2015), \"OkCupid Data Introductory Statistics Data Science Courses\", Journal Statistics Education, Volume 23, Number 2. https://www.tandfonline.com/doi/abs/10.1080/10691898.2015.11889737 Kuhn Johnson (2020), Feature Engineering Selection, Chapman Hall/CRC . https://bookdown.org/max/FES/ https://github.com/topepo/FES","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/okc_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OkCupid Binary Predictors — okc_binary","text":"okc_binary_train,okc_binary_test data frame frames 61 columns","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/okc_binary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OkCupid Binary Predictors — okc_binary","text":"Data originally Kim (2015) includes training test set consistent Kuhn Johnson (2020). Predictors include ethnicity indicators set keywords derived text essay data.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/okc_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OkCupid Binary Predictors — okc_binary","text":"","code":"data(okc_binary) str(okc_binary_train) #> tibble [38,809 × 61] (S3: tbl_df/tbl/data.frame) #>  $ software        : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ engineer        : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ startup         : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ tech            : num [1:38809] 0 0 0 0 1 0 0 0 0 1 ... #>  $ computers       : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ engineering     : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ computer        : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ internet        : num [1:38809] 0 0 0 0 1 0 0 0 0 0 ... #>  $ technology      : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ science         : num [1:38809] 0 0 0 0 1 0 0 0 0 0 ... #>  $ programming     : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ technical       : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ web             : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ developer       : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ im              : num [1:38809] 1 0 1 0 1 1 0 1 1 0 ... #>  $ programmer      : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ scientist       : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ code            : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ stephenson      : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ geek            : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ nerd            : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ lol             : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ biotech         : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ matrix          : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ coding          : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ geeky           : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ solving         : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ problems        : num [1:38809] 0 0 1 0 1 0 0 0 0 0 ... #>  $ data            : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ fixing          : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ teacher         : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ student         : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ silicon         : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ law             : num [1:38809] 0 0 0 0 0 0 0 1 0 0 ... #>  $ mechanical      : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ electronic      : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ pratchett       : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ wikipedia       : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ neal            : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ mobile          : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ math            : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ lab             : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ systems         : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ electronics     : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ futurama        : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ alot            : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ solve           : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ websites        : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ firefly         : num [1:38809] 0 0 0 0 0 0 0 0 0 1 ... #>  $ valley          : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ apps            : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ lawyer          : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ asian           : num [1:38809] 1 0 0 0 0 0 0 0 0 0 ... #>  $ black           : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ hispanic_latin  : num [1:38809] 0 0 0 0 0 0 0 1 0 0 ... #>  $ indian          : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ middle_eastern  : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ native_american : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ other           : num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ pacific_islander: num [1:38809] 0 0 0 0 0 0 0 0 0 0 ... #>  $ white           : num [1:38809] 1 1 1 1 1 1 1 1 1 1 ..."},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_hat_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Print number of predictors and principal components used. — print.apd_hat_values","title":"Print number of predictors and principal components used. — print.apd_hat_values","text":"Print number predictors principal components used.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_hat_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print number of predictors and principal components used. — print.apd_hat_values","text":"","code":"# S3 method for apd_hat_values print(x, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_hat_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print number of predictors and principal components used. — print.apd_hat_values","text":"x apd_hat_values object. ... currently used, required extensibility.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_hat_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print number of predictors and principal components used. — print.apd_hat_values","text":"None","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_hat_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print number of predictors and principal components used. — print.apd_hat_values","text":"","code":"model <- apd_hat_values(~ Sepal.Length + Sepal.Width, iris) print(model) #> # Predictors: #> 2"},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Print number of predictors and principal components used. — print.apd_pca","title":"Print number of predictors and principal components used. — print.apd_pca","text":"Print number predictors principal components used.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print number of predictors and principal components used. — print.apd_pca","text":"","code":"# S3 method for apd_pca print(x, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print number of predictors and principal components used. — print.apd_pca","text":"x apd_pca object. ... currently used, required extensibility.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print number of predictors and principal components used. — print.apd_pca","text":"None","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print number of predictors and principal components used. — print.apd_pca","text":"","code":"model <- apd_pca(~ Sepal.Length + Sepal.Width, iris) print(model) #> # Predictors: #>    2 #> # Principal Components: #>    2 components were needed #>    to capture at least 95% of the #>    total variation in the predictors."},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Print number of predictors and principal components used. — print.apd_similarity","title":"Print number of predictors and principal components used. — print.apd_similarity","text":"Print number predictors principal components used.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print number of predictors and principal components used. — print.apd_similarity","text":"","code":"# S3 method for apd_similarity print(x, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print number of predictors and principal components used. — print.apd_similarity","text":"x apd_similarity object. ... currently used, required extensibility.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print number of predictors and principal components used. — print.apd_similarity","text":"None","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/print.apd_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print number of predictors and principal components used. — print.apd_similarity","text":"","code":"set.seed(535) tr_x <- matrix(   sample(0:1, size = 20 * 50, prob = rep(.5, 2), replace = TRUE),   ncol = 20  ) model <- apd_similarity(tr_x) print(model) #> Applicability domain via similarity #> Reference data were 20 variables collected on 50 data points. #> New data summarized using the mean."},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_hat_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Score new samples using hat values — score.apd_hat_values","title":"Score new samples using hat values — score.apd_hat_values","text":"Score new samples using hat values","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_hat_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score new samples using hat values — score.apd_hat_values","text":"","code":"# S3 method for apd_hat_values score(object, new_data, type = \"numeric\", ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_hat_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score new samples using hat values — score.apd_hat_values","text":"object apd_hat_values object. new_data data frame matrix new predictors. type single character. type predictions generate. Valid options : \"numeric\" numeric value summarizes hat values sample across training set. ... used, required extensibility.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_hat_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score new samples using hat values — score.apd_hat_values","text":"tibble predictions. number rows tibble guaranteed number rows new_data. type = \"numeric\", tibble contains two columns hat_values hat_values_pctls. column hat_values_pctls percent units value 11.5 indicates , training set, 11.5 percent training set samples smaller values sample scored.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_hat_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score new samples using hat values — score.apd_hat_values","text":"","code":"train_data <- mtcars[1:20, ] test_data <- mtcars[21:32, ]  hat_values_model <- apd_hat_values(train_data)  hat_values_scoring <- score(hat_values_model, new_data = test_data) hat_values_scoring #> # A tibble: 12 × 2 #>    hat_values hat_values_pctls #>         <dbl>            <dbl> #>  1      1.45              1    #>  2      0.852            90.0  #>  3      1.13              1    #>  4      1.19              1    #>  5      0.901            93.2  #>  6      0.335             6.34 #>  7      5.41              1    #>  8      5.91              1    #>  9      8.19              1    #> 10      5.11              1    #> 11     12.4               1    #> 12      0.960             1"},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a apd_pca — score.apd_pca","title":"Predict from a apd_pca — score.apd_pca","text":"Predict apd_pca","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a apd_pca — score.apd_pca","text":"","code":"# S3 method for apd_pca score(object, new_data, type = \"numeric\", ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a apd_pca — score.apd_pca","text":"object apd_pca object. new_data data frame matrix new samples. type single character. type predictions generate. Valid options : \"numeric\" numeric predictions. ... used, required extensibility.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a apd_pca — score.apd_pca","text":"tibble predictions. number rows tibble guaranteed number rows new_data.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict from a apd_pca — score.apd_pca","text":"function computes principal components new data percentiles compared training data. number principal components computed depends threshold given fit time. also computes multivariate distance principal component mean.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a apd_pca — score.apd_pca","text":"","code":"train <- mtcars[1:20, ] test <- mtcars[21:32, -1]  # Fit mod <- apd_pca(mpg ~ cyl + log(drat), train)  # Predict, with preprocessing score(mod, test) #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> # A tibble: 12 × 6 #>       PC1     PC2 distance PC1_pctl PC2_pctl distance_pctl #>     <dbl>   <dbl>    <dbl>    <dbl>    <dbl>         <dbl> #>  1 -1.16   0.664     1.34      42.9    87.6           43.0 #>  2  1.84   0.345     1.87      95.3    42.2           95.4 #>  3  1.23  -0.259     1.26      47.3    36.7           36.8 #>  4  0.461 -1.03      1.13       0      98.5           25.5 #>  5  1.34  -0.157     1.35      52.5    27.4           44.7 #>  6 -1.61   0.217     1.62      89.2    31.7           89.3 #>  7 -1.98  -0.159     1.99      96.4    27.5           96.2 #>  8 -1.25   0.579     1.37      48.0    82.0           59.1 #>  9 -0.103 -1.60      1.60       0       1             87.3 #> 10 -0.231 -0.0655    0.241      0       6.76           0   #> 11  0.700 -0.793     1.06      22.4    96.0           24.4 #> 12 -1.64   0.184     1.65      90.6    29.2           90.6"},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Score new samples using similarity methods — score.apd_similarity","title":"Score new samples using similarity methods — score.apd_similarity","text":"Score new samples using similarity methods","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score new samples using similarity methods — score.apd_similarity","text":"","code":"# S3 method for apd_similarity score(object, new_data, type = \"numeric\", add_percentile = TRUE, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score new samples using similarity methods — score.apd_similarity","text":"object apd_similarity object. new_data data frame matrix new predictors. type single character. type predictions generate. Valid options : \"numeric\" numeric value summarizes similarity values sample across training set. add_percentile single logical; percentile similarity score relative training set values computed? ... used, required extensibility.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score new samples using similarity methods — score.apd_similarity","text":"tibble predictions. number rows tibble guaranteed number rows new_data. type = \"numeric\", tibble contains column called \"similarity\". add_percentile = TRUE, additional column called similarity_pctl added. values percent units value 11.5 indicates , training set, 11.5 percent training set samples smaller values sample scored.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.apd_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score new samples using similarity methods — score.apd_similarity","text":"","code":"# \\donttest{ data(qsar_binary)  jacc_sim <- apd_similarity(binary_tr)  mean_sim <- score(jacc_sim, new_data = binary_unk) mean_sim #> # A tibble: 5 × 2 #>   similarity similarity_pctl #>        <dbl>           <dbl> #> 1     0.376            49.8  #> 2     0.284            13.5  #> 3     0.218             6.46 #> 4     0.452           100    #> 5     0.0971            5.59 # }"},{"path":"https://applicable.tidymodels.org/dev/reference/score.html","id":null,"dir":"Reference","previous_headings":"","what":"A scoring function — score","title":"A scoring function — score","text":"scoring function","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A scoring function — score","text":"","code":"score(object, ...)  # S3 method for default score(object, ...)"},{"path":"https://applicable.tidymodels.org/dev/reference/score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A scoring function — score","text":"object Depending context: data frame predictors. matrix predictors. recipe specifying set preprocessing steps created recipes::recipe(). ... currently used, required extensibility.","code":""},{"path":"https://applicable.tidymodels.org/dev/reference/score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A scoring function — score","text":"tibble predictions.","code":""},{"path":"https://applicable.tidymodels.org/dev/news/index.html","id":"applicable-0011","dir":"Changelog","previous_headings":"","what":"applicable 0.0.1.1","title":"applicable 0.0.1.1","text":"CRAN release: 2020-06-15 Minor patch release: fixed failing units tests due recent package updates.","code":""},{"path":"https://applicable.tidymodels.org/dev/news/index.html","id":"applicable-001","dir":"Changelog","previous_headings":"","what":"applicable 0.0.1","title":"applicable 0.0.1","text":"CRAN release: 2020-05-25 First CRAN version.","code":""}]
